using Intallk.Config;
using Intallk.Models;
using Newtonsoft.Json;
using OneBot.CommandRoute.Attributes;
using OneBot.CommandRoute.Configuration;
using OneBot.CommandRoute.Services;
using OneBot.CommandRoute.Services.Implements;
using Sora.Entities;
using Sora.Entities.Info;
using Sora.Entities.Segment;
using Sora.EventArgs.SoraEvent;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Intallk.Modules;

public class MainModule : IOneBotController
{
    public static IServiceProvider? Services { get; set; }
    public static IntallkConfig? Config { get; set; }
    public delegate Task<bool> PrivateMessageHookCallback(PrivateMessageEventArgs e, PrivateMessageHook hook);
    public class PrivateMessageHook
    {
        public long QQ { get; set; }
        public PrivateMessageHookCallback? Callback { get; set; }
        public object? Data { get; set; }
    }
    public delegate Task<bool> GroupMessageHookCallback(GroupMessageEventArgs e, GroupMessageHook hook);
    public class GroupMessageHook
    {
        public long Group { get; set; }
        public long QQ { get; set; }
        public GroupMessageHookCallback? Callback { get; set; }
        public object? Data { get; set; }
    }
    public static List<GroupMessageHook> hooks = new();
    public static List<PrivateMessageHook> hooks2 = new();
    public static int ExceptionCount = 0;
    public static Dictionary<long, DateTime> replyTime = new Dictionary<long, DateTime>();
    readonly System.Random random = new(Guid.NewGuid().GetHashCode());
    readonly ILogger<MainModule> _logger;
    readonly ICommandService _commandService;
    public static Dictionary<long, string> nicks = new Dictionary<long, string>();
    public static string GetCacheQQName(object? e, long qqid)
    {
        //Console.WriteLine("Cache fetching nick: " + qqid);
        string ret = "";
        if(nicks.ContainsKey(qqid)) return nicks[qqid];
        ret = GetQQName(e, qqid);
        nicks.Add(qqid, ret);
        return ret;
    }
    public static string GetQQName(object? e, long qqid)
    {
        Console.WriteLine("Fetching nick: " + qqid);
        string ret = "";
        try
        {
            switch (e)
            {
                case GroupMessageEventArgs group:
                    GroupMemberInfo info = group.SourceGroup.GetGroupMemberInfo(qqid).Result.memberInfo;
                    ret = info.Card;
                    if (ret == "" || ret == null) ret = info.Nick;
                    if (ret == "" || ret == null)
                    {
                        UserInfo userinfo = group.SoraApi.GetUserInfo(qqid).Result.userInfo;
                        ret = userinfo.Nick;
                    }
                    if (ret == "" || ret == null) ret = qqid.ToString();
                    break;
                case PrivateMessageEventArgs qq:
                    UserInfo user = qq.SoraApi.GetUserInfo(qqid).Result.userInfo;
                    ret = user.Nick;
                    break;
            }
        }
        catch
        {
            ret = qqid.ToString() + "(ÂºÇÂ∏∏Ë¥¶Âè∑)";
        }
        return ret;
    }
    public void LogError(Exception exception)
    {
        File.AppendAllText(IntallkConfig.DataPath + "\\Logs\\error_" + DateTime.Now.ToString("yy_MM_dd") + ".txt", DateTime.Now.ToString() + "\n" + exception.Message + "\n" + exception.StackTrace + "\n");
    }
    public MainModule(ICommandService commandService, ILogger<MainModule> logger)
    {
        _logger = logger;
        _commandService = commandService;
        foreach (string file in Directory.GetFiles(IntallkConfig.DataPath + "\\DrawingScript"))
        {
            string code = File.ReadAllText(file);
            JsonSerializer serializer = new();
            PaintFile paintfile = (PaintFile)serializer.Deserialize(new StringReader(code), typeof(PaintFile))!;
            Painting.paints.Add(new PaintingProcessing(paintfile));
        }
        logger.LogInformation("Â∑≤ËØªÂÖ•" + Painting.paints.Count + "‰∏™ÁªòÂõæÊ®°Êùø„ÄÇ");
        commandService.Event.OnException += (context, exception) =>
        {
            ExceptionCount++;
            logger.LogError(exception.Message + "\n" + exception.StackTrace);
            switch (context.SoraEventArgs)
            {
                case GroupMessageEventArgs group:
                    group.Reply("Âá∫ÈîôÂï¶");
                    group.Reply(SoraSegment.Image(IntallkConfig.DataPath + "\\Resources\\error.jpg"));
                    break;
                case PrivateMessageEventArgs qq:
                    qq.Reply("Âá∫ÈîôÂï¶");
                    qq.Reply(SoraSegment.Image(IntallkConfig.DataPath + "\\Resources\\error.jpg"));
                    break;
            }
            // ËÆ∞Â∞èÊú¨Êú¨
            LogError(exception);
        };
        commandService.Event.OnGroupMessage += (context) =>
        {
            var e = (GroupMessageEventArgs)context.SoraEventArgs;
            // Debug
            /**
            if (e.Sender.Id != 1361778219 && e.Message.RawText.StartsWith('.'))
            {
                e.Reply("ÈùûÂ∏∏Êä±Ê≠âÔºåÁé∞Âú®ÈªëÂò¥Ê≠£Âú®Ë¢´404Ë∞ÉÊï¥ÊîπÈÄ†‰∏≠ÔºåÊöÇÊó∂Êó†Ê≥ï‰ΩøÁî®Âë¢qwq");
                return 1;
            }**/
            bool needClear = false;
            foreach (var hook in hooks)
            {
                if (hook.QQ == e.Sender.Id && hook.Group == e.SourceGroup.Id)
                {
                    try
                    {
                        if (hook.Callback!(e, hook).Result)
                        {
                            hook.QQ = 0;
                            needClear = true;
                        }
                    }
                    catch(Exception err)
                    {
                        LogError(err);
                        e.Reply(e.Sender.At() + "Âá∫‰∫Ü‰∫õÈóÆÈ¢òÔºåÈªëÂò¥Êó†Ê≥ïÁªßÁª≠‰ºöËØù„ÄÇ\n" + err.Message);
                        hook.QQ = 0;
                        needClear = true;
                    }
                }
            }
            if (needClear) hooks.RemoveAll(m => m.QQ == 0);
            return 0;
        };
        commandService.Event.OnFriendRequest += (context) =>
        {
            var e = (FriendRequestEventArgs)context.SoraEventArgs;
            e.Accept();
            e.Sender.SendPrivateMessage("ÊÇ®Â∑≤ÊàêÂäü‰∏éÈªëÂò¥Ê∑ªÂä†Â•ΩÂèãÔºåÊÑüË∞¢ÊÇ®ÂØπÈªëÂò¥ÁöÑÊîØÊåÅ„ÄÇüòò");
            e.Sender.SendPrivateMessage(SoraSegment.Image(IntallkConfig.DataPath + "\\Resources\\oh.png"));
            return 1;
        };
        commandService.Event.OnGroupRequest += (context) =>
        {
            var e = (AddGroupRequestEventArgs)context.SoraEventArgs;
            e.Accept();
            e.SourceGroup.SendGroupMessage("Â§ßÂÆ∂Â•ΩÂëÄÔºåÊàëÊòØÊú∫Âô®‰∫∫ÈªëÂò¥~ÂèëÈÄÅ'.help'ÂèØ‰ª•Êü•ÁúãËØ¥Êòé‰π¶Âì¶~");
            e.SourceGroup.SendGroupMessage(SoraSegment.Image(IntallkConfig.DataPath + "\\Resources\\oh.png"));
            return 1;
        };
        commandService.Event.OnPrivateMessage += (context) =>
        {
            var e = (PrivateMessageEventArgs)context.SoraEventArgs;
            bool sendBio = false;
            if (!replyTime.ContainsKey(e.Sender.Id))
            {
                replyTime.Add(e.Sender.Id, DateTime.Now);
                sendBio = true;
            }
            else
            {
                if ((DateTime.Now - replyTime[e.Sender.Id]).TotalMinutes > 20)
                {
                    sendBio = true;
                    replyTime[e.Sender.Id] = DateTime.Now;
                }
            }
            if (sendBio)
            {
                e.Reply("üòäÊÇ®Â•ΩÂëÄÔºåÊàëÊòØ404ÁöÑÊú∫Âô®‰∫∫ÈªëÂò¥ÔºåÊÇ®ÂèØ‰ª•Âú®Áæ§ÈáåÂèëÈÄÅ'.help'Êü•ÁúãÊàëÁöÑÊåá‰ª§ËØ¥Êòé‰π¶Âô¢~\n" +
                        "Â¶ÇÊûúÊÇ®Ë¶ÅËÅîÁ≥ª404Ôºå‰πüÂèØ‰ª•ÔºöQQ1361778219„ÄÇ\nÈªëÂò¥Â∞ÜËá™Âä®Â§ÑÁêÜÊ∂àÊÅØÔºåÂõ†Ê≠§404ÂæàÂ∞ëÊü•ÁúãÈªëÂò¥ÁöÑÊ∂àÊÅØÔºåÊúâ‰∫ãËØ∑ËÅîÁ≥ª404ÔºåË∞¢Ë∞¢„Éæ(‚âß‚ñΩ‚â¶*)o");
            }

            bool needClear = false;
            try
            {
                foreach (var hook2 in hooks2)
                {
                    if (hook2.QQ == e.Sender.Id)
                    {
                        try
                        {
                            if (hook2.Callback!(e, hook2).Result)
                            {
                                hook2.QQ = 0;
                                needClear = true;
                            }
                        }
                        catch(Exception err)
                        {
                            LogError(err);
                            e.Reply("Âá∫‰∫Ü‰∫õÈóÆÈ¢òÔºåÈªëÂò¥Êó†Ê≥ïÁªßÁª≠‰ºöËØù„ÄÇ\n" + err.Message);
                            hook2.QQ = 0;
                            needClear = true;
                        }
                    }
                }
            }
            catch
            {

            }
            if (needClear) hooks2.RemoveAll(m => m.QQ == 0);
            return 0;
        };
    }

    public static void RegisterHook(long QQ, PrivateMessageHookCallback Callback, object Data = null!)
    {
        hooks2.Add(new PrivateMessageHook
        {
            QQ = QQ,
            Callback = Callback,
            Data = Data
        });
    }

    public static void RegisterHook(long QQ, long Group, GroupMessageHookCallback Callback, object Data = null!)
    {
        hooks.Add(new GroupMessageHook
        {
            QQ = QQ,
            Group = Group,
            Callback = Callback,
            Data = Data
        });
    }

    [Command("ÈªëÂò¥")]
    public void Bark(GroupMessageEventArgs e)
    {
        string[] eg = { "Áà¨", "Êâç...Êâç‰∏çÂëäËØâ‰Ω†ÊàëÂú®Âë¢", "Âπ≤ÂòõÂï¶", "ËÄÅÂ®òÊ¥ªÁùÄ", "Êàë‰∏çÂú®" };
        e.Reply(eg[random.Next(0, eg.Length)]);
    }

    [Command("ÈªëÂò¥ÔºÅ")]
    public void Bark2(GroupMessageEventArgs e)
    {
        string[] eg = { "Áà¨ÔºÅ", "ËÄÅÂ®òÂøôÁùÄÔºÅ", "Ôºü‰ªÄ‰πà‰∫ã", "Ôºü", "Êàë‰∏çÂú®ÔºÅ‰∏çÂú®ÔºÅ‰∏çÂú®ÔºÅ‰∏çÂú®ÔºÅ" };
        e.Reply(eg[random.Next(0, eg.Length)]);
    }
    [Command("ÈªëÂò¥Ôºü")]
    public void Bark3(GroupMessageEventArgs e)
    {
        string[] eg = { "üòÖ", "ü§î", "üòï", "Ôºü", "ÂíãÔºü" };
        e.Reply(eg[random.Next(0, eg.Length)]);
    }
    [Command("ÈªëÂò¥ÊôöÂÆâ")]
    public void Bark4(GroupMessageEventArgs e)
    {
        string[] eg = { "ÂóØÂóØÔºåÊôöÂÆâÂì¶", "ÊôöÂÆâ~", "ÂóØÂóØÔºåÊó©ÁÇπ‰ºëÊÅØ~", "Âø´Áù°ÂêßÔºå‰∏ÄÂ§©‰∏ãÊù•‰πüÁ¥Ø‰∫ÜÂêß" };
        e.Reply(eg[random.Next(0, eg.Length)]);
    }
    [Command("ÈªëÂò¥Áà±‰Ω†")]
    public void Bark5(GroupMessageEventArgs e)
    {
        string[] eg = { "ÔºüÔºüÔºüÔºüÔºüÔºüÔºüÔºüÔºüÔºü", "‰Ω†‰∏çÂØπÂä≤‰Ω†‰∏çÂØπÂä≤ÔºüÔºü", "ÔºüÔºüÔºü‰∏çË¶ÅËøôÊ†∑ÔºåÂæàÁ™ÅÁÑ∂ÔºåÊàëÂæàÂÆ≥ÊÄï", "ÔºüÔºüÂóØÔºåÔºåÔºåÂóØÔºå„ÄÇ„ÄÇ„ÄÇÊàëÔºåÊàë‰πü„ÄÇ„ÄÇ„ÄÇÁà±   ‰Ω†ÔºÅ",
                        "ÔºàÊÄé‰πàÂäûÊÄé‰πàÂäûÊúâ‰∫∫ÂíåÊàëÂëäÁôΩÂëúÂìáÂìáÂìáÂìáÔºâ","Ë∞¢Ë∞¢‰Ω†Ôºå‰ΩÜÊòØ„ÄÇ„ÄÇ„ÄÇÊàëÂ∑≤ÁªèÊúâÂñúÊ¨¢ÁöÑÁãó‰∫Ü„ÄÇ","ÔºÅÔºÅÔºÅÈªëÂò¥ÂæàÊÑüÂä®Ôºå‰ΩÜÊòØ...‰∫∫ÂíåÁãóÊòØ...‰∏çÂèØ‰ª•ÁöÑ",
                        "‰Ω†xpÊúâÁÇπÊÄ™Âó∑","Âà´ÔºåÂà´ÔºåÂà´„ÄÇ„ÄÇ„ÄÇÊàëÊ≤°ÊúâÁªèÈ™åÁöÑ„ÄÇ","ÔºÅÔºÅÔºÅÂØπ‰∏çËµ∑ÔºÅÁé∞Âú®ÊâçÊÑèËØÜÂà∞ÔºÅË∞¢Ë∞¢‰Ω†Ôºå‰ΩÜÊòØ„ÄÇ‰∏çË°å","ÊàëÁü•ÈÅìÔºåÂÖ∂ÂÆû...‰ΩÜÊòØ...ÁúüÁöÑ‰∏çÂèØ‰ª•",
                        "ËÄÅÂ®ò‰∏ãÁè≠‰∫Ü","‰∏çÂèØ‰ª•~Áé∞Âú®ÈªëÂò¥ËøòÂú®Â∑•‰ΩúÂë¢~Ë∞¢Ë∞¢‰Ω†ÁöÑÂøÉÊÑè„ÄÇ"};
        e.Reply(eg[random.Next(0, eg.Length)]);
    }

    [Command("help")]
    public void Help(GroupMessageEventArgs e)
    {
        string prefix = Config!.CommandPrefix[0];
        StringBuilder sb = new StringBuilder();
        foreach (IOneBotController controller in Services!.GetServices<IOneBotController>())
        {
            if (controller is SimpleOneBotController module)
            {
                ModuleInformation? info = module.Info;
                if (info != null)
                {
                    if (info.HelpCmd != null)
                    {
                        sb.AppendLine(prefix + "help " + info.HelpCmd + " Ôºö" + info.ModuleName + " ‰ΩøÁî®ÊåáÂçó");
                    }
                }
            }
        }
        e.Reply("üåàÊ¨¢ËøéÊü•ÁúãÈªëÂò¥‰ΩøÁî®ËØ¥ÊòéÔºÅ\n" +
                "ÁõÆÂâçÊîØÊåÅÁöÑÂäüËÉΩÔºö\n" + sb.ToString());
    }
        

    [Command("help <moduleName>")]
    public void ModuleHelp(GroupMessageEventArgs e, string moduleName)
    {
        string prefix = Config!.CommandPrefix[0];
        foreach (IOneBotController controller in Services!.GetServices<IOneBotController>())
        {
            if (controller is SimpleOneBotController module)
            {
                ModuleInformation? info = module.Info;
                if (info != null)
                {
                    if (info.HelpCmd == moduleName)
                    {
                        StringBuilder sb = new StringBuilder(), pub = new StringBuilder(), pri = new StringBuilder();
                        sb.AppendLine("Ê¨¢Ëøé‰ΩøÁî®ÂäüËÉΩ'" + info.ModuleName + "'ÔºÅ\n" + info.ModuleUsage);
                        foreach(MethodInfo minfo in module.GetType().GetMethods())
                        {
                            CmdHelpAttribute? help = minfo.GetCustomAttribute<CmdHelpAttribute>();
                            if (help != null)
                            {
                                CommandAttribute? cmd = minfo.GetCustomAttribute<CommandAttribute>();
                                if (cmd == null) 
                                    continue;
                                string cmdDes = prefix;
                                if (help.ArgDescription == "")
                                {
                                    cmdDes += cmd.Pattern;
                                }
                                else
                                {
                                    string[] des = help.ArgDescription.Split(' ');
                                    int j = 0; bool flag = false;
                                    for(int i = 0;i < des.Length; i++)
                                    {
                                        for(;j < cmd.Pattern.Length; j++)
                                        {
                                            if (cmd.Pattern[j] == '<' || cmd.Pattern[j] == '[')
                                            {
                                                cmdDes += cmd.Pattern[j];
                                                flag = true;
                                            }
                                            else if (cmd.Pattern[j] == '>' || cmd.Pattern[j] == ']')
                                            {
                                                cmdDes += des[i] + cmd.Pattern[j];
                                                flag = false;
                                                j++;
                                                break;
                                            }
                                            if (!flag) cmdDes += cmd.Pattern[j];
                                        }
                                    }
                                }
                                cmdDes += "Ôºö" + help.UsageDescription;
                                if (cmd.EventType == OneBot.CommandRoute.Models.Enumeration.EventType.GroupMessage)
                                {
                                    pub.AppendLine(cmdDes);
                                }
                                else
                                {
                                    pri.AppendLine(cmdDes);
                                }
                            }
                        }
                        if (pub.Length > 0)
                        {
                            sb.AppendLine("üåàÁæ§Êåá‰ª§ÊåáÂçóÔºö");
                            sb.Append(pub);
                        }
                        if (pri.Length > 0)
                        {
                            sb.AppendLine("üåàÁßÅËÅäÊåá‰ª§ÊåáÂçóÔºö");
                            sb.Append(pri);
                        }
                        sb.AppendLine("üí°<>ÂÜÖÁöÑË°®Á§∫ÂøÖÈ°ªÂ°´ÂÜôÔºå[]ÂÜÖÁöÑË°®Á§∫ÂèØ‰∏çÂ°´ÂÜô„ÄÇ");
                        e.Reply(sb.ToString());
                        return;
                    }
                }
            }
        }
    }

    [Command("status")]
    public void Status(GroupMessageEventArgs e)
    {

    }
}
